#dear god, getting this setup on amazon's ubuntu instance is a hassle
Get an AWS account, follow their tutorials for getting started with things
*before* getting an instance. This will definitely include creating a keypair
in .pem format, that you NEED to save to you computer (at least, for linux
home system; maybe Windows is different?). 
You'll also need to make a security group - follow those directions carefully,
you will need to add your local IP addr to the exceptions list (and it's tricky
in that first you "add to rules" but then you need to "apply added rules" or
some nonsense. Ensure that when you check in your security-group later, your IP
is allowed on SSH (port 23, i think?). 

ok, now install an aws ubuntu instance. don't do the amazon-linux, I don't get
what that even is, and it's runing python2.6 and just dont do it. Note also that
certain linux things change from OS to OS, so 'apache2' on ubuntu is 'httpd' on
amazon linux, and other confusion.

ok, now you've set up your ubuntu instance. you'll probably want to alias the
ssh, cause it includes your .pem file (keypair, mentioned above), and the IP
addr of the instance, which you can find somewhere on your aws-instance page.

## ssh to your ubuntu box
NB: everything else from here on out takes place on your aws instance.
## need to install all the basics:
sudo apt-get install gcc git mlocate apache2 mysql-server
## that's right, aws-ubuntu comes without gcc

## need a bunch of dev packages...
## some of these are needed for python3.3 to work correctly, like readline6-dev
sudo apt-get install libreadline6-dev libncurses5-dev libssl1.0.0 tk8.5-dev zlib1g-dev liblzma-dev

## install python3.3 (because python 3.0-3.2 has some weird issues with unicode
## strings, and so a ton of modules just don't even try to work with it).
wget http://python.org/ftp/python/3.3.2/Python-3.3.2.tgz
./configure --enable-shared --prefix=/somewhere
## --enable-shared is SUPER IMPORTANT. --prefix says where to install
## do not proceed unless you did --enable-shared. 
make
sudo make install

## now, it'd be nice if the goddamn computer could ever find it
sudo vim /etc/environment
PATH=/somewhere/bin:whatever_was_here
LD_LIBRARY_PATH=/somewhere/lib

## it'd also be cool if apache could find it
sudo vim /etc/apache2/envvars
export PATH {as above}
export LB_LIBRARY_PATH {as above}
#-- also, i did this, not sure if necessary
export APACHE_RUN_USER=www-data
export APACHE_RUN_GROUP=www-data

## get helpful things for python
curl -O http://python-distribute.org/distribute_setup.py
## it's important to use the python you just installed, otherwise
## it's going to install into the wrong site-packages, and life will suck
sudo /somehwere/bin/python3 distribute_setup.py
sudo /somewhere/bin/easy_install-3.3 {bottle, beaker, jinja2}
## not sure if you can run multiple commands at once; singularly works though

## get the latest mod_wsgi
wget https://github.com/GrahamDumpleton/mod_wsgi/archive/feature/3.5.tar.gz
./configure --with-python=/somewhere/bin/python3
make
sudo make install

## tell apache more things
sudo vim /etc/apache2/apache2.conf
#--add the following: (obviously?) change any {helloworld} to whatever is
#--correct, i.e. your directory and scripts in /var/www/*
LoadModule wsgi_module /usr/lib/apache2/modules/mod_wsgi.so
<VirtualHost *:80>
    ServerName ##.##.##.##  ## replace with your AWS IP
    WSGIDaemonProcess helloworld user=www-data group=www-data processes=1 threads=5
    WSGIScriptAlias /helloworld /var/www/helloworld/adapter.wsgi

    <Directory /var/www/helloworld>
        WSGIProcessGroup helloworld
        WSGIApplicationGroup %{GLOBAL}
        Order deny,allow
        Allow from all
    </Directory>
</VirtualHost>
## NB: I don't fully understand the above; I don't know which things need to be
##     named exactly the same, and which don't. Experiment and tell me!

## lets make editing our files a bit easier:
sudo adduser <user> www-data  # on AWS-EC2+ubuntu, user=ubuntu
sudo chown -R www-data:www-data /var/www
sudo chgrp -R g+rw /var/www

## finally, you should be able to make stuff in /var/www/helloworld
## don't forget to restart apache2 after changes
sudo /etc/init.d/apache2 restart
#-- if this fails, figure out what's happening and fix it...

## if restarting succeeds, but a webpage gives you a 500 (Internal Server Error)
tail /var/logs/apache2/errorl.log  ## figure it out and fix it...

## If you want a sample WSGI program running, ask and ye shall receive
